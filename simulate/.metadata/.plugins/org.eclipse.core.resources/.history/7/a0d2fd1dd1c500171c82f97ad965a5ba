package gui;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.border.EmptyBorder;


public class fwfwf extends JFrame {

	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					fwfwf frame = new fwfwf();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public mihiro() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 692, 433);

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		JMenu menu = new JMenu("ファイル");
		menuBar.add(menu);

		JMenuItem menuItem = new JMenuItem("新規作成");
		menu.add(menuItem);

		JMenuItem menuItem_1 = new JMenuItem("開く");
		menu.add(menuItem_1);

		JMenuItem menuItem_2 = new JMenuItem("上書き保存");
		menu.add(menuItem_2);

		JMenuItem menuItem_3 = new JMenuItem("名前を付けて保存");
		menu.add(menuItem_3);

		JMenuItem menuItem_4 = new JMenuItem("波形を画像として保存");
		menu.add(menuItem_4);

		JMenuItem menuItem_5 = new JMenuItem("閉じる");
		menu.add(menuItem_5);

		JMenu menu_1 = new JMenu("表示");
		menuBar.add(menu_1);

		JMenuItem menuItem_6 = new JMenuItem("回路図");
		menu_1.add(menuItem_6);

		JMenuItem menuItem_7 = new JMenuItem("数式");
		menu_1.add(menuItem_7);

		JMenuItem menuItem_8 = new JMenuItem("素子リスト");
		menu_1.add(menuItem_8);

		JMenuItem menuItem_9 = new JMenuItem("波形");
		menu_1.add(menuItem_9);



		JMenu menu_2 = new JMenu("編集");
		menuBar.add(menu_2);

		JMenuItem menuItem_10 = new JMenuItem("戻る");
		menu_2.add(menuItem_10);

		JMenuItem menuItem_11 = new JMenuItem("進む");
		menu_2.add(menuItem_11);

		JMenuItem menuItem_12 = new JMenuItem("コピー");
		menu_2.add(menuItem_12);

		JMenuItem menuItem_13 = new JMenuItem("切り取り");
		menu_2.add(menuItem_13);

		JMenuItem menuItem_14 = new JMenuItem("ペースト");
		menu_2.add(menuItem_14);

		JMenuItem menuItem_15 = new JMenuItem("全消去");
		menu_2.add(menuItem_15);

		JMenu menu_3 = new JMenu("ヘルプ");
		menuBar.add(menu_3);

		JMenuItem menuItem_16 = new JMenuItem("ヘルプビューア");
		menu_3.add(menuItem_16);

		JMenu menu_4 = new JMenu("実行");
		menuBar.add(menu_4);

		JMenuItem menuItem_17 = new JMenuItem("シミュレーション");
		menu_4.add(menuItem_17);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JMenuBar menuBar_1 = new JMenuBar();
		menuBar_1.setBounds(0, 0, 676, 21);
		contentPane.add(menuBar_1);

		JButton button = new JButton("戻る");
		menuBar_1.add(button);

		JButton button_1 = new JButton("進む");
		menuBar_1.add(button_1);

		JButton button_2 = new JButton("開く");
		menuBar_1.add(button_2);

		JButton button_3 = new JButton("保存");
		menuBar_1.add(button_3);

		JButton button_4 = new JButton("シミュレーション開始");
		menuBar_1.add(button_4);

		JButton button_5 = new JButton("シミュレーション終了");
		menuBar_1.add(button_5);

		JPanel panel = new JPanel();
		panel.setBounds(0, 237, 676, 136);
		contentPane.add(panel);

		JLabel lblRc = new JLabel("RC直列回路の波形");
		lblRc.setBounds(0, 222, 676, 13);
		contentPane.add(lblRc);

		JPanel panel_1 = new JPanel();
		panel_1.setBounds(0, 41, 340, 176);
		contentPane.add(panel_1);

		JPanel panel_2 = new JPanel();
		panel_2.setBounds(339, 41, 173, 176);
		contentPane.add(panel_2);

		JPanel panel_3 = new JPanel();
		panel_3.setBounds(512, 41, 164, 176);
		contentPane.add(panel_3);

		JLabel lblRc_1 = new JLabel("RC直列回路");
		lblRc_1.setBounds(0, 28, 340, 13);
		contentPane.add(lblRc_1);

		JLabel label = new JLabel("素子リスト");
		label.setBounds(339, 28, 173, 13);

		contentPane.add(label);

		JLabel label_1 = new JLabel("数式");
		label_1.setBounds(512, 28, 164, 13);
		contentPane.add(label_1);

	}



	private static void addPopup(Component component, final JPopupMenu popup) {
		component.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			public void mouseReleased(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			private void showMenu(MouseEvent e) {
				popup.show(e.getComponent(), e.getX(), e.getY());
			}
		});
	}
}
